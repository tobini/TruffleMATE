#!/usr/bin/env python2.7
import argparse
import sys
import os

BASE_DIR    = os.path.dirname(os.path.realpath(__file__))
GRAAL_HOME  = os.getenv('GRAAL_HOME',  None)
GRAAL_FLAGS = os.getenv('GRAAL_FLAGS', None)

if sys.argv[0].endswith('oficial'):
	GRAAL_LOCATIONS = [BASE_DIR + '/../graalvm-0.12-re/bin/']
	java_bin  = 'javao'
else:
	GRAAL_LOCATIONS = ['/home/smarr/Projects/SOM/graal/jvmci',
                   '/Users/smarr/Projects/SOM/graal/jvmci',
                   '/Users/guidochari/Documents/Projects/graal-compiler/jvmci',
                   BASE_DIR + '/../GraalBasic/jvmci']
   	java_bin  = 'java'
   	

JDK_VERSIONS = ['jdk1.8.0_65', 'jdk1.8.0_60', 'jdk1.8.0_45', 'jdk1.8.0_45-internal', 'jdk1.8.0_40', 'jdk1.8.0_25']

parser = argparse.ArgumentParser(
    description='Helper script to run TruffleMate with/without Graal')

parser.add_argument('-d', '--debug', help='wait for debugger to attach',
                    dest='debug', action='store_true', default=False)
parser.add_argument('-i', '--igv', help='dump compilation details to IGV',
                    dest='igv', action='store_true', default=False)
parser.add_argument('-if', '--igv-to-file', help='dump compilation details to file to be loaded by IGV',
                    dest='igv_to_file', action='store_true', default=False)
parser.add_argument('-l', '--low-level', help='enable low-level optimization output',
                    dest='low_level', action='store_true', default=False)
parser.add_argument('-ti', '--trace-invalidation', help='trace assumption invalidation and transfers to interpreter',
                    dest='trace_invalidation', action='store_true', default=False)
parser.add_argument('-it', '--inline_threshold', help='Increase the inlining threshold',
                    dest='inline_threshold', type=int, default=2500)

def addBaseDir( path ):
    paths = path.split(":")
    return ':'.join([BASE_DIR + '/' + s for s in paths])

defaultClassPath = ['Smalltalk:Smalltalk/Mate/:Smalltalk/Mate/MOP:' + 
                   'Smalltalk/Collections/Streams:' +
                   'Smalltalk/FileSystem/Core:Smalltalk/FileSystem/Disk:Smalltalk/FileSystem/Streams:' + 
                   'Examples/Benchmarks:Examples/Benchmarks/LanguageFeatures:Examples/Benchmarks/DeltaBlueInstrumented:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody:Examples/Benchmarks/Mate:Examples/Benchmarks/Mate/DelegationProxies:Examples/Benchmarks/Mate/Tracing:Examples/Benchmarks/Json:Examples/Benchmarks/Mate/IndividualOperations:Examples/Benchmarks/Mate/Profiling:Examples/Benchmarks/Mate/Columnar']

defaultClassPath = map(addBaseDir, defaultClassPath)

parser.add_argument('-cp', '--classpath', help='classpath, default: all benchs and core-lib',
                    dest='som_cp', default=defaultClassPath)

profile = parser.add_argument_group('Profile', 'Profile Execution')
parser.add_argument('-gp', '--profile', help='enable profiling after warmup',
                    dest='profile', action='store_true', default=False)
parser.add_argument('-ga', '--profile-allocations', help='enable profiling after warmup, and profile allocations',
                    dest='profile_allocations', action='store_true', default=False)
parser.add_argument('-gt', '--profile-times', help='enable profiling after certain time intervals',
                    dest='profile_timed', action='store_true', default=False)
profile.add_argument('-tp', '--truffle-profile', help='enable Graal-level profiling after warmup',
                    dest='truffle_profile', action='store_true', default=False)

parser.add_argument('-w', '--perf-warnings', help='enable performance warnings',
                    dest='perf_warnings', action='store_true', default=False)

parser.add_argument('-o', '--only', help='only compile give methods, comma separated list',
                    dest='only_compile', default=None)
parser.add_argument('-v', '--visual-vm', help='connect to VisualVM for profiling',
                    dest='visual_vm', action='store_true', default=False)
parser.add_argument('-t', '--num-threads', help='number of threads to be used',
                    dest='threads', default=None)

parser.add_argument('-A', '--no-assert', help='execute with assertions disabled',
                    dest='assert_', action='store_false', default=True)
parser.add_argument('-B', '--no-background', help='disable background compilation',
                    dest='background_compilation', action='store_false', default=True)
parser.add_argument('-C', '--no-compilation', help='disable Truffle compilation',
                    dest='no_compilation', action='store_true', default=False)
parser.add_argument('-G', '--interpreter', help='run without Graal',
                    dest='interpreter', action='store_true', default=False)
parser.add_argument('-X', '--java-interpreter', help='run without Graal, and only the Java interpreter',
                    dest='java_interpreter', action='store_true', default=False)
parser.add_argument('-T', '--no-trace', help='do not print truffle compilation info',
                    dest='no_trace', action='store_false', default=True)
parser.add_argument('--no-graph-pe', help='disable Graph PE',
                    dest='graph_pe', action='store_false', default=True)

tools = parser.add_argument_group('Tools', 'Additional Tools')
tools.add_argument('-dm', '--dynamic-metrics', help='Capture Dynamic Metrics',
                    dest='dynamic_metrics', action='store_true', default=False)
tools.add_argument('-hl', '--highlight', nargs=1, help='enable highlight tool and define output file',
                    dest='highlight_file', default=False, metavar='highlight-file')
tools.add_argument('-td', '--truffle-debugger', help='start Truffle debugger',
                    dest='truffle_debugger', action='store_true', default=False)
tools.add_argument('-wd', '--web-debugger', help='start Web debugger',
                    dest='web_debugger', action='store_true', default=False)

parser.add_argument('--mate', help='run som with mate nodes',
                    dest='mate', action='store_true', default=False)
parser.add_argument('-activateMate', help='enable mate nodes',
                    dest='mateActivated', action='store_true', default=False)


parser.add_argument('-vv', '--verbose', action='store_true', default=False,
                    dest='verbose', help="print command-line before executing")

parser.add_argument('args', nargs=argparse.REMAINDER,
                    help='arguments passed to TruffleMate')

args, unknown = parser.parse_known_args()

JAVA_ARGS = ['-d64']

if args.java_interpreter or args.dynamic_metrics:
    args.interpreter = True

if args.interpreter:
    java_bin = "java"
else:
    # determine graal binary
    
    if GRAAL_HOME:
        graal_home = GRAAL_HOME
    else:
        graal_home = None
        for d in GRAAL_LOCATIONS:
            print d
            if os.path.isdir(d):
                graal_home = d
                break
        if not graal_home:
            print "Graal couldn't be found. Please set GRAAL_HOME"
            sys.exit(1)

    if sys.argv[0].endswith('oficial'):
        java_bin = graal_home + java_bin
    else:
        java_bin = graal_home
        for v in JDK_VERSIONS:
            p = graal_home + '/' + v + '/product'
            if os.path.isdir(p):
                java_bin = p + JAVA_BIN
                break
	            		
    if java_bin is graal_home or not os.path.isfile(java_bin):
      	print "No compatible JDK build found, is this script outdated?"
      	sys.exit(1)

SOM_ARGS = ['-Xbootclasspath/a:'
             + BASE_DIR + '/build/classes:'
             + BASE_DIR + '/libs/truffle/mxbuild/dists/truffle-api.jar',
            "som.vm.Universe"]

if GRAAL_FLAGS and not args.interpreter:
    flags = [GRAAL_FLAGS]
else:
    flags = []

if args.dynamic_metrics:
    SOM_ARGS += ['--dynamic-metrics']
    flags += ['-Dsom.dynamicMetrics=true']

# == Hotspot -XX:CompileCommand=print,*::callRoot
# Splitting
# -G:+TruffleSplitting
# -G:+TruffleSplittingNew

# == Compiler Settings
if args.inline_threshold:
	TWEAK_INLINING = [
#'-Dgraal.TruffleCompilationThreshold=191',
                  '-Dgraal.TruffleInliningMaxCallerSize=' + str(args.inline_threshold) 
#                  '-Dgraal.TruffleSplittingMaxCalleeSize=1000000'
                  ]
else:
   TWEAK_INLINING = []               


# Handle executable names
if sys.argv[0].endswith('fast'):
    args.assert_ = False
    args.no_trace = True
if sys.argv[0].endswith('debug'):
    args.perf_warnings = True
    args.background_compilation = False

if args.debug:
    flags += ['-Xdebug',
              '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000']
if not args.interpreter and (args.igv or args.igv_to_file):
    flags += ['-Dgraal.Dump=Truffle,TruffleTree']
if not args.interpreter and args.igv_to_file:
    flags += ['-Dgraal.PrintIdealGraphFile=true']
if args.low_level:
    flags += ['-XX:+UnlockDiagnosticVMOptions', '-XX:+LogCompilation',
              '-XX:+TraceDeoptimization']
if not args.interpreter and (args.profile or args.profile_allocations or args.profile_timed):
    flags += ['-XX:JVMCICounterSize=5000', '-Dgraal.ProfileCompiledMethods=true',
              '-DProfileCompiledMethodsPhase.WITH_SECTION_HEADER=true']
    if args.profile_allocations:
        flags += ['-Dgraal.ProfileAllocations=true']
    if args.profile_timed:
        flags += ['-Dgraal.TimedDynamicCounters=1000']
    if args.profile:
        flags += ['-Dgraal.BenchmarkDynamicCounters=out,completed,total']
if not args.interpreter and args.perf_warnings:
    flags += ['-Dgraal.TruffleCompilationExceptionsAreFatal=true',
              '-Dgraal.TraceTrufflePerformanceWarnings=true',
              '-Dgraal.TraceTruffleCompilation=true',
              '-Dgraal.TraceTruffleCompilationDetails=true',
              '-Dgraal.TraceTruffleExpansionSource=true']
if not args.interpreter and args.trace_invalidation:
    flags += ['-Dgraal.TraceTruffleTransferToInterpreter=true',
              '-Dgraal.TraceTruffleAssumptions=true']    
if not args.interpreter and args.only_compile:
    flags.append("-Dgraal.TruffleCompileOnly=%s" % only_compile)
if args.visual_vm:
    flags += ['-agentpath:/Users/smarr/Downloads/visualvm_138/profiler/lib/deployed/jdk16/mac/libprofilerinterface.jnilib=/Users/smarr/Downloads/visualvm_138/profiler/lib,5140']
if args.assert_:
    flags += ['-esa', '-ea']
else:
    flags += ['-dsa', '-da']
if not args.interpreter and not args.background_compilation:
    flags += ['-Dgraal.TruffleBackgroundCompilation=false']
if not args.interpreter and args.no_compilation:
    flags.append('-Dgraal.TruffleCompileOnly=__FAKE_METHOD_NON_EXISTING__')
if not args.interpreter and args.no_trace and not args.perf_warnings:
    flags += ['-Dgraal.TraceTruffleInlining=false', '-Dgraal.TraceTruffleCompilation=false']
if not args.interpreter and not args.graph_pe:
    flags += ['-Dgraal.GraphPE=false']
if args.threads:
    flags += ['-Dsom.threads=%s' % args.threads ]
if args.java_interpreter:
    flags += ['-Xint']
    
if (args.truffle_profile or args.truffle_debugger or args.web_debugger or
    args.dynamic_metrics or args.highlight_file):
    flags += ['-Dsom.instrumentation=true']    

mate_args = []
if args.mate:
    mate_args += ['--mate']
if args.mateActivated:
    mate_args += ['-activateMate']

all_args = JAVA_ARGS + unknown + flags + TWEAK_INLINING + SOM_ARGS  + mate_args + ['-cp'] + args.som_cp.split() + args.args

if args.verbose:
    print "CMD: " + java_bin + ' ' + ' '.join(all_args)

os.execvp(java_bin, all_args)
